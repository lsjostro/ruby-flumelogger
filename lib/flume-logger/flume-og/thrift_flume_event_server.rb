#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'flume_compatibility_types'

module ThriftFlumeEventServer
  class Client
    include ::Thrift::Client

    def append(evt)
      send_append(evt)
    end

    def send_append(evt)
      send_message('append', Append_args, :evt => evt)
    end
    def close()
      send_close()
      recv_close()
    end

    def send_close()
      send_message('close', Close_args)
    end

    def recv_close()
      result = receive_message(Close_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_append(seqid, iprot, oprot)
      args = read_args(iprot, Append_args)
      @handler.append(args.evt)
      return
    end

    def process_close(seqid, iprot, oprot)
      args = read_args(iprot, Close_args)
      result = Close_result.new()
      @handler.close()
      write_result(result, oprot, 'close', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Append_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EVT = 1

    FIELDS = {
      EVT => {:type => ::Thrift::Types::STRUCT, :name => 'evt', :class => ::ThriftFlumeEvent}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Append_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Close_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Close_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

